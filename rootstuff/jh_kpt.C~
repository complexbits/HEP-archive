#define jh_kpt_cxx
#include "jh_kpt.h"
#include "TH2.h"
#include "TStyle.h"
#include "TCanvas.h"
#include <iostream>

//ofstream myout;

void ariel_aa::Loop()
{

TFile plotz("kpt.root","recreate");


  // Kpt Histograms

  TH1F* kpt_hi = new TH1F("kpt_hi", "0.5<Kpt<1.0",40,0.4,1.1);
  TH1F* kpt_lo = new TH1f("kpt_lo", "Kpt>1.0",40,0.9,2.0);

  if (fChain == 0) return;
   
  int aa = 1000; int nn = 0;

  Int_t nentries = Int_t(fChain->GetEntries());
  cout <<"Number of entries  " << nentries   << endl;



  // for (Int_t jentry=0; jentry<10000;jentry++) {
   for (Int_t jentry=0; jentry<nentries;jentry++) {

    Int_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    
    	if(jentry/aa>nn) cout << "Event #" << jentry << endl;
      	nn = jentry/aa;



    if(PV_npv<1 || PV_ntrk[0]<2) continue;

    // Fill histograms with vertex info


    for(int j=0; j<BPSIK_nvtx; j++) {
      
      int jpsi_id = BPSIK_id[j];

      //require JPSI

      if( (PSI_q1[jpsi_id]+PSI_q2[jpsi_id])==0 && PSI_chi2[jpsi_id]<10.0
	  &&
	  PSI_pt1[jpsi_id]>=1.5 && PSI_pt2[jpsi_id]>=1.5 && 
	  PSI_smt1[jpsi_id]>=1 && PSI_smt2[jpsi_id]>=1 &&
	  PSI_mass[jpsi_id]>2.8 && PSI_mass[jpsi_id]<3.3 &&
	  PSI_pt[jpsi_id]>3.) {

	float chi2 = BPSIK_chi2[j];
	float dl   = BPSIK_dl[j];
	float coll = BPSIK_collinearity[j];
	float dl_sig = dl/BPSIK_dlError[j];

	float Kch2 = BPSIK_kchi2vtx[j];
	float Kpt = BPSIK_kpt[j];
	int Ksmt  = BPSIK_khits[j];
	
	
	if(Kch2<=10 && chi2<10 && dl_sig>=4.5 && Ksmt>1 && coll>0.95 && Kpt<=1.0 && Kpt>=0.5){
	  kpt_lo->Fill(Kpt);
	}

	if(Kch2<=10 && chi2<10 && dl_sig>=4.5 && Ksmt>1 && coll>0.95 && Kpt>=1.0 ){
	  kpt_hi->Fill(Kpt);
	}



      }
  }
}

  plotz.Write();
  cout << "COMPLETE!";  
}
