#define bjpsik_tght_v3_cxx
#include "bjpsik_tght_v3.h"
#include "TH2.h"
#include "TStyle.h"
#include "TCanvas.h"

void bjpsik_tght_v3::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L bjpsik_tght_v3.C
//      Root > bjpsik_tght_v3 t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

// Initialize variables

// Book histograms

   TH1S *dimu_mass = new TH1S("dimu_mass", "Di Muon mass", 120, 2.5, 3.7);
   TH1S *dimu_mass_cut = new TH1S("dimu_mass_cut", "Di Muon mass w/cuts", 120, 2.5, 3.7);
   TH1S *dimu_dksig_cut = new TH1S("dimu_dksig_cut", "Decay length signif.",100, 0., 10.);

   TH1S *bpsik_mass = new TH1S("bpsik_mass", "J/psi K mass no cuts",30, 4.7, 5.9);
   TH1S *bpsik_mass_nc = new TH1S("bpsik_mass_nc", "J/psi K mass jpsi hits cut",30, 4.7, 5.9);
   TH1S *bpsik_mass_cut = new TH1S("bpsik_mass_cut", "J/psi K mass w/cuts",30, 4.7, 5.9);
   TH1S *bpsik_count = new TH1S("bpsik_count", "Number of Bs per event",40,0., 40.);
   TH1S *bpsik_khit = new TH1S("bpsik_khit", "Hits on K track", 30, 0., 30.);
   TH1S *bpsik_k_cut = new TH1S("bpsik_k_cut", "J/psi K mass with K hits cut", 30, 4.7, 5.9);
   TH1S *bpsik_vtxchi2 = new TH1S("bpsik_vtxchi2", "VTX chi2 w/K", 100, 0., 50.);
   TH1S *bpsik_kpt = new TH1S("bpsik_kpt", "K pt with cuts", 100, 0., 10.);
   TH1S *bpsik_pt = new TH1S("bpsik_pt", "B pt with cuts", 100, 0., 25.);
   TH1S *bpsik_pt_cut = new TH1S("bpsik_pt_cut", "J/psi K mass pt>10",30, 4.7, 5.9);
   TH1S *bpsik_dlsig = new TH1S("bpsik_dl", "Decay length B", 100, 0., 10.);

   Int_t nentries = Int_t(fChain->GetEntriesFast());

   cout << "START  Number of events  =  " << nentries << endl;

   Int_t nbytes = 0, nb = 0;
   for (Int_t jentry=0; jentry<nentries;jentry++) {
      Int_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;

      Int_t countB = 0;
      Int_t countBcutJHit =0;

      for (Int_t iLoop=0; iLoop < 40; iLoop++){

	if (BPSIK_mass[iLoop] > 0.){
	  countB++;
	  bpsik_mass -> Fill(BPSIK_mass[iLoop]);
	  Int_t psi_id = BPSIK_id[iLoop];
	  dimu_mass -> Fill(PSI_mass[psi_id]);
	  if (PSI_cft1[psi_id] >= 16 && PSI_cft2[psi_id] >= 16 &&
	      PSI_smt1[psi_id] >= 6 && PSI_smt2[psi_id] >= 6 &&
	      PSI_mass[psi_id] > 2.9 && PSI_mass[psi_id] < 3.25){

	    countBcutJHit++;
	    dimu_mass_cut -> Fill(PSI_mass[psi_id]);
	    bpsik_mass_nc -> Fill(BPSIK_mass[iLoop]);

	    Float_t psi_sig = PSI_dl[psi_id]/PSI_dlError[psi_id];
	    dimu_dksig_cut -> Fill(psi_sig);

	    if (psi_sig > 3. && PSI_collinearity[psi_id] > 0.9 &&
		PSI_dl[psi_id] > .0){
	      bpsik_mass_cut -> Fill(BPSIK_mass[iLoop]);
	      bpsik_vtxchi2 -> Fill(BPSIK_kchi2vtx[iLoop]);

	      bpsik_khit->Fill(BPSIK_khits[iLoop]);
	      if (BPSIK_khits[iLoop] > 20 && BPSIK_kchi2vtx[iLoop] <10.){
		bpsik_kpt -> Fill(BPSIK_kpt[iLoop]);
		bpsik_pt  -> Fill(BPSIK_pt[iLoop]);
		bpsik_k_cut -> Fill(BPSIK_mass[iLoop]);
		Float_t psik_dlsig = BPSIK_dl[iLoop]/BPSIK_dlError[iLoop];
		bpsik_dlsig -> Fill(psik_dlsig);
		

		//ignore this set of cuts
		if (BPSIK_pt[iLoop] > 5. &&
		    psik_dlsig>3. && BPSIK_collinearity[iLoop] > 0.9 &&
		    BPSIK_dl[iLoop] > .0){
		  bpsik_pt_cut -> Fill(BPSIK_mass[iLoop]);
		}
	      }
	    }
	  }
	}
      }
      bpsik_count -> Fill(countB);
   }
}
