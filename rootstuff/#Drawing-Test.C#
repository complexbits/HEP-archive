#include "TH2.h"
#include "TStyle.h"
#include "TCanvas.h"
#include <iostream>

void Drawing_Test(){

gStyle->SetPadColor(0);
gStyle->SetCanvasColor(0);
gStyle->SetCanvasBorderMode(0);
gStyle->SetFrameBorderMode(0); 
gStyle->SetHistFillColor(0);
gStyle->SetHistFillStyle(0);
gStyle->SetHistLineStyle(1);  
gStyle->SetHistLineWidth(1);

gStyle->SetOptTitle(1);
gStyle->SetOptStat(1);

gStyle->SetOptFit(1011);
gStyle->SetMarkerStyle(20);

TFile* lotsa_histos = new TFile("more_histograms_than_you_can_shake_a_stick_at.root", "read");
// ----- Function to calculate signal to background ratio after fitting 
float DoRatio(fit){ 

    // ----- Get Fit Parameters
  
 	float fpar_gA = fit->GetParameter(0);
	float fpar_gm = fit->GetParameter(1);
	float fpar_sig = fit->GetParameter(2);

 	float fpar_a = fit->GetParameter(3);
	float fpar_b = fit->GetParameter(4);
	float fpar_c = fit->GetParameter(5);
	float fpar_d = fit->GetParameter(6);
	
	float pmax = fpar_gm+(2*fpar_sig);
	float pmin = fpar_gm-(2*fpar_sig);

	float binwidth = (6.0-4.75)/40;
	
    // ---- Integrate the background and signal fits, output to stdout:

	float A_backgd = abs(fpar_a*(pmax-pmin)+(0.5*fpar_b*(pmax**2-pmin**2))+((1/3)*fpar_c*(pmax**3-pmin**3))+(0.25*fpar_d*(pmax**4-pmin**4)))/binwidth;
	float A_signal = fpar_sig*fpar_gA*sqrt(3.14159/2)/binwidth;
	
	cout << endl << "  A_signal = " << A_signal << "    A_backgd = " << A_backgd; 	

    // ----- Get a signal/background ratio for this cut, output to stdout:
	
	//	if (A_backgd!=0){ 
	float sbratio = A_signal/A_backgd;
	
	cout << "   sbratio = " << sbratio << endl;
	//	}else{
	//	  float sbratio = 0;
	//	  cout << "   sbratio = " << sbratio << endl;
	  //	}
	cout << "-----------------------------------------------------------------------" << endl << endl;
	
	return sbratio;
}

 TF1 *fit7 = new TF1("fit7","gaus(0)+pol3(3)",5,16);

 fit7->SetParameter(0,250);
 fit7->SetParameter(1,5.3);
 fit7->SetParameter(2,.005);
 
 
	float ks_hi_val[4];
	float ks_hi_sbratio[4];
	

 	cout << endl << "--------------------------- ";
	cout << "Ksmt cut = 0 ---------------------------";
	cout << endl;
	m_hi_Ksmt0->Fit("fit7");
 		ks_hi_val[0]=0;
		ks_hi_sbratio[0]=DoRatio(fit7);

 	cout << endl << "--------------------------- ";
	cout << "Ksmt cut = 1 ---------------------------";
	cout << endl;
	m_hi_Ksmt0->Fit("fit7");
 		ks_hi_val[1]=1;
		ks_hi_sbratio[1]=DoRatio(fit7);

 	cout << endl << "--------------------------- ";
	cout << "Ksmt cut = 2 ---------------------------";
	cout << endl;
	m_hi_Ksmt0->Fit("fit7");
 		ks_hi_val[2]=2;
		ks_hi_sbratio[2]=DoRatio(fit7);		

 	cout << endl << "--------------------------- ";
	cout << "Ksmt cut = 3 ---------------------------";
	cout << endl;
	m_hi_Ksmt0->Fit("fit7");
 		ks_hi_val[3]=3;
		ks_hi_sbratio[3]=DoRatio(fit7);

 	TGraph* g_2_ks = new TGraph(4,ks_hi_val,ks_hi_sbratio);

	TCanvas *c_2_ks = new TCanvas("c_2_ks", "S/B Ratio, m>0.5GeV, ksmt var", 300, 375, 300, 375);
		g_2_ks->Draw("APL");

// ----------------- FITS FOR LOW MASS HISTOGRAMS (Kpt) -----------------------


 TF1 *fit2 = new TF1("fit2","gaus(0)+pol3(3)",5,16);

 fit2->SetParameter(0,250);
 fit2->SetParameter(1,5.3);
 fit2->SetParameter(2,.005);
 
 
	float kpt_lo_val[11];
	float kpt_lo_sbratio[11];
	

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 0.5 ---------------------------";
	cout << endl;
	m_lo_Kpt_0_5->Fit("fit2");
 		kpt_lo_val[0]=0.5;
		kpt_lo_sbratio[0]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 0.6 ---------------------------";
	cout << endl;
	m_lo_Kpt_0_6->Fit("fit2");
 		kpt_lo_val[1]=0.6;
		kpt_lo_sbratio[1]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 0.7 ---------------------------";
	cout << endl;
	m_lo_Kpt_0_7->Fit("fit2");
 		kpt_lo_val[2]=0.7;
		kpt_lo_sbratio[2]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 0.8 ---------------------------";
	cout << endl;
	m_lo_Kpt_0_8->Fit("fit2");
 		kpt_lo_val[3]=0.8;
		kpt_lo_sbratio[3]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 0.9 ---------------------------";
	cout << endl;
	m_lo_Kpt_0_9->Fit("fit2");
 		kpt_lo_val[4]=0.9;
		kpt_lo_sbratio[4]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.0 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_0->Fit("fit2");
 		kpt_lo_val[5]=1.0;
		kpt_lo_sbratio[5]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.1 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_1->Fit("fit2");
 		kpt_lo_val[6]=1.1;
		kpt_lo_sbratio[6]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.2 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_2->Fit("fit2");
 		kpt_lo_val[7]=1.2;
		kpt_lo_sbratio[7]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.3 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_3->Fit("fit2");
 		kpt_lo_val[8]=1.3;
		kpt_lo_sbratio[8]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.4 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_4->Fit("fit2");
 		kpt_lo_val[9]=1.4;
		kpt_lo_sbratio[9]=DoRatio(fit2);

 	cout << endl << "--------------------------- ";
	cout << "Kpt cut = 1.5 ---------------------------";
	cout << endl;
	m_lo_Kpt_1_5->Fit("fit2");
 		kpt_lo_val[10]=1.5;
		kpt_lo_sbratio[10]=DoRatio(fit2);

 	TGraph* g_1_kpt = new TGraph(11,kpt_lo_val,kpt_lo_sbratio);

	TCanvas *c_1_kpt = new TCanvas("c_1_kpt", "S/B Ratio, m<0.5GeV, kpt var", 300, 375, 300, 375);
		g_1_kpt->Draw("APL");



TCanvas *sbratios_lo = new TCanvas("sbratios_lo", "S/B Ratio, m<0.5GeV: kpt, ksmt, dlsig, coll", 600, 750, 600, 750);

 

}
