0a1,11
> /************************************************************
> The skeleton for this file (and corresponding header dstag.h)
> were generated automatically by ROOT, using: 
> 
> TFile *f = new TFile("aadstagmc15423.root");
> dstag->MakeClass("dstag");
> 
> Jamie Hegarty 11/30/04
> **************************************************************/
> 
> 
32c43,64
<    if (fChain == 0) return;
---
>  
>   if (fChain == 0) return;
>   Int_t nentries = Int_t(fChain->GetEntriesFast());
>   Int_t nbytes = 0, nb = 0;
>   
>   /*********** BEGIN USER-INSERTED CODE ****************/
>   
>   TH1F *h_unmixed_events = new TH1F("h_unmixed_events", "VPDL, Unmixed Events", 150, 0., 15);
>   TH1F *h_mixed_events = new TH1F("h_mixed_events", "VPDL, Mixed Events", 150, 0., 15);
>   TH1F *all_events_vpdl = new TH1F("all_events_vpdl", "VPDL, All Events", 150, 0., 15);
>   TH1F *h_tagumok = new TH1F("h_tagumok", "h_tagmuok",2, 0., 2.);
> 
>   TH1F *h_lbdiff = new TH1F("h_lbdiff", "VPDL-TrueVPDL, All Events", 40, -2., 2.);
>   TH2F *h2_lbdiff = new TH2F("h2_lbdiff", "VPDL-TrueVPDL vs. TrueVPDL, All Events", 40, -2.,2.,40,0., 2.);
> 
>   /************* END USER-INSERTED CODE ****************/
>     
>   for (Int_t jentry=0; jentry<nentries;jentry++) { // Begin Looping over all entries
>     Int_t ientry = LoadTree(jentry);
>     if (ientry < 0) break;
>     nb = fChain->GetEntry(jentry);   nbytes += nb;
>     // if (Cut(ientry) < 0) continue;
34c66,142
<    Int_t nentries = Int_t(fChain->GetEntriesFast());
---
>     /*********** BEGIN USER-INSERTED CODE ****************/
> 
>     
>     //check to see whether a tagging muon was found
>     // 1 = yes, 0 = no
>     if (tagmuok == 1.){ 
>       
>       // convert the visible proper decay length from cm to ps
>       // by dividing out c = 0.03 cm/ps:
>       
>       Double_t lbps = lb/0.03;
>       Double_t lbmcps = lbmc/0.03;
>       
>       Double_t lbdiff = lbps - lbmcps;
> 
>       h_lbdiff->Fill(lbdiff);
>       h2_lbdiff->Fill(lbdiff,lbmcps);
> 
> 
>       all_events_vpdl->Fill(lbps);
>       h_tagumok->Fill(tagmuok);
>       
>       // check the sign of the muon here vs. opposite muon
>       // if they're equal, mixing occurred. otherwise this event is unmixed.
>       if (q6 == qmu){
> 	h_mixed_events->Fill(lbps);
>       }else{
> 	h_unmixed_events->Fill(lbps);
>       }
>       
>     }
>     
>     /************* END USER-INSERTED CODE ****************/
>     
>   } // End looping over all entries
>   /*********** BEGIN USER-INSERTED CODE ****************/ 
>   
>   // do (unmixed - mixed) / (mixed + unmixed) to get oscillation:
>   
>   TH1F *h_mix1 = (TH1F*) h_mixed_events->Clone();
>   TH1F *h_unmix1 = (TH1F*) h_unmixed_events->Clone();
>   TH1F *h_unmix2 = (TH1F*) h_unmixed_events->Clone();
>   
>   // ---- Nu + Nm -------
>   h_unmix2->Add(h_mixed_events);
>   
>   // ---- Nu - Nm -------
>   h_mix1->Scale(-1);
>   h_unmix1->Add(h_mix1);
>   
>   // ---- (Nu - Nm) / (Nu + Nm) -----
>   h_unmix1->Divide(h_unmix2);
>   
>   
>   gROOT->SetStyle("Plain");
>   gStyle->SetOptStat(11111);
>   gStyle->SetHistFillColor(10);
>   TCanvas *c1 = new TCanvas("c1", "Canvas1", 800,600);
>   c1->Divide(2,2);
>   c1->cd(1);
>   h_mixed_events->Draw();
>   c1->cd(2);
>   h_unmixed_events->Draw();
>   c1->cd(3);
>   h_unmix1->Draw();
>   c1->cd(4);
>   all_events_vpdl->Draw();
>   
>   TCanvas *c2 = new TCanvas("c2", "Canvas2", 800,600);
>   c2->Divide(2,2);
>   c2->cd(1);
>   h_lbdiff->Draw();
>   c2->cd(2);
>   h2_lbdiff->Draw();  
>   c2->cd(3);
>   h2_lbdiff->Draw("LEGO2");
>   /************* END USER-INSERTED CODE ****************/
36,42d143
<    Int_t nbytes = 0, nb = 0;
<    for (Int_t jentry=0; jentry<nentries;jentry++) {
<       Int_t ientry = LoadTree(jentry);
<       if (ientry < 0) break;
<       nb = fChain->GetEntry(jentry);   nbytes += nb;
<       // if (Cut(ientry) < 0) continue;
<    }
43a145
> 
