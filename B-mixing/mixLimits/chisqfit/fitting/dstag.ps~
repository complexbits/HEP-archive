%!PS-Adobe-3.0
%%Title: dstag.C
%%For: Jamie Hegarty
%%Creator: a2ps version 4.13
%%CreationDate: Fri Apr 15 14:47:14 2005
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/************************************************************) p n
(2) # (The skeleton for this file \(and corresponding header dstag.h\)) N
(3) # (were generated automatically by ROOT, using: ) N
(4) # () N
(5) # (TFile *f = new TFile\("bs_mixing_MC.root"\);) N
(6) # (dstag->MakeClass\("dstag"\);) N
(7) # () N
(8) # (Jamie Hegarty 11/30/04) N
(9) # (**************************************************************/) N
(10) # () N
(11) # () N
(12) # (#define dstag_cxx) N
(13) # (#include "dstag.h") N
(14) # (#include "TH2.h") N
(15) # (#include "TStyle.h") N
(16) # (#include "TCanvas.h") N
(17) # () N
(18) # (void dstag::Loop\(\)) N
(19) # ({) N
(20) # (//   In a ROOT session, you can do:) N
(21) # (//      Root > .L dstag.C) N
(22) # (//      Root > dstag t) N
(23) # (//      Root > t.GetEntry\(12\); // Fill t data members with entry number 12) N
(24) # (//      Root > t.Show\(\);       // Show values of entry 12) N
(25) # (//      Root > t.Show\(16\);     // Read and show values of entry 16) N
(26) # (//      Root > t.Loop\(\);       // Loop on all entries) N
(27) # (//) N
(28) # () N
(29) # (//     This is the loop skeleton where:) N
(30) # (//    jentry is the global entry number in the chain) N
(31) # (//    ientry is the entry number in the current Tree) N
(32) # (//  Note that the argument to GetEntry must be:) N
(33) # (//    jentry for TChain::GetEntry) N
(34) # (//    ientry for TTree::GetEntry and TBranch::GetEntry) N
(35) # (//) N
(36) # (//       To read only selected branches, Insert statements like:) N
(37) # (// METHOD1:) N
(38) # (//    fChain->SetBranchStatus\("*",0\);  // disable all branches) N
(39) # (//    fChain->SetBranchStatus\("branchname",1\);  // activate branchname) N
(40) # (// METHOD2: replace line) N
(41) # (//    fChain->GetEntry\(jentry\);       //read all branches) N
(42) # (//by  b_branchname->GetEntry\(ientry\); //read only this branch) N
(43) # ( ) N
(44) # (  if \(fChain == 0\) return;) N
(45) # (  Int_t nentries = Int_t\(fChain->GetEntriesFast\(\)\);) N
(46) # (  Int_t nbytes = 0, nb = 0;) N
(47) # (  ) N
(48) # (  /*********** BEGIN USER-INSERTED CODE ****************/) N
(49) # (  ) N
(50) # (  TH1F *h_unmixed_events = new TH1F\("h_unmixed_events", "VPDL, Unmixed Events", ) N
0 T (150, 0., 15\);) N
(51) # (  TH1F *h_mixed_events = new TH1F\("h_mixed_events", "VPDL, Mixed Events", 150, 0) N
0 T (., 15\);) N
(52) # () N
(53) # (  TH1F *h_ume_osci = new TH1F\("h_unmixed_events", "VPDL, Unmixed Events", 150, 0) N
0 T (., 15\);) N
(54) # (  TH1F *h_me_osci = new TH1F\("h_mixed_events", "VPDL, Mixed Events", 150, 0., 15) N
0 T (\);) N
(55) # () N
(56) # (  TH1F *all_events_vpdl = new TH1F\("all_events_vpdl", "VPDL, All Events", 150, 0) N
0 T (., 15\);) N
(57) # (  //TH1F *h_tagumok = new TH1F\("h_tagumok", "h_tagmuok",2, 0., 2.\);) N
(58) # (  TH1F *h_lbdiff = new TH1F\("h_lbdiff", "VPDL-TrueVPDL, All Events", 40, -2., 2.) N
0 T (\);) N
(59) # (  TH2F *h2_lbdiff = new TH2F\("h2_lbdiff", "VPDL-TrueVPDL vs. TrueVPDL, All Event) N
0 T (s", 40, -2.,2.,40,0., 2.\);) N
(60) # () N
(61) # (  Double_t qtagmcount=0.;) N
(62) # (  Double_t qtagucount=0.;) N
(63) # (  Double_t qtagncount=0.;) N
(64) # (  Double_t ecount=0.;) N
(65) # () N
(66) # (  Double_t dilution;) N
(dstag.C) (Page 1/4) (Apr 12, 05 18:15) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(67) # () p n
(68) # (  printf\("\\n event#   osci  oscimc   q5   q6  qmu  qtagin    *\\n"\);) N
(69) # (  printf\("-------------------------------------------------------\\n"\);  ) N
(70) # (  /************* END USER-INSERTED CODE ****************/) N
(71) # (  Int_t iflag1=0, iflag2=0, iflag3=0;) N
(72) # (  Char_t *ok[20]="";) N
(73) # (  for \(Int_t jentry=0; jentry<nentries;jentry++\) { // Begin Looping over all ent) N
0 T (ries) N
(74) # (    Int_t ientry = LoadTree\(jentry\);) N
(75) # (    if \(ientry < 0\) break;) N
(76) # (    nb = fChain->GetEntry\(jentry\);   nbytes += nb;) N
(77) # (    // if \(Cut\(ientry\) < 0\) continue;) N
(78) # () N
(79) # (    /*********** BEGIN USER-INSERTED CODE ****************/) N
(80) # () N
(81) # (    /**) N
(82) # () N
(83) # (       matchBs - reconstruction matches to MC) N
(84) # (       osci - mixed or not \(valid for matchBs==1\)) N
(85) # (       lbmctrue - true PDL from MC) N
(86) # (       lbmc - VPDL from MC) N
(87) # (       lb - reconstructed VPDL) N
(88) # (       mds - Ds mass) N
(89) # (       ) N
(90) # (       qtagin - tagging information \(compare charge of B's mu to tagging mu\)) N
(91) # (                qtagin*qmu > 0 => mixed) N
(92) # () S 8 T () S 16 T (qtagin*qmu < 0 => unmixed) N
(93) # () N
(94) # () S 8 T (oscimc - mixed or not in MC \(?\)) N
(95) # () N
(96) # () S 8 T (tagmuok - tagging muon found) N
(97) # () S 8 T (q6 - charge of tagging muon) N
(98) # () S 8 T (q5 - charge of pion from Ds) N
(99) # () S 8 T (qmu - charge of muon from reconstructed B) N
(100) # () N
(101) # (     **/) N
(102) # () N
(103) # (    // convert the visible proper decay length from cm to ps) N
(104) # (    // by dividing out c = 0.03 cm/ps:) N
(105) # (    ) N
(106) # (    Double_t lbps = lb/0.03;) N
(107) # (    Double_t lbmcps = lbmc/0.03;) N
(108) # (    Double_t lbmctrueps = lbmctrue/0.03;) N
(109) # (    ) N
(110) # (    Double_t lbdiff = lbps - lbmcps;) N
(111) # () N
(112) # (    if\(tagmuok==1 && matchBs>0 && q5!=qmu\){) N
(113) # (      ) N
(114) # (      h_lbdiff->Fill\(lbdiff\);) N
(115) # (      h2_lbdiff->Fill\(lbdiff,lbmcps\);) N
(116) # (      ) N
(117) # (      ) N
(118) # (      all_events_vpdl->Fill\(lbmctrueps\);) N
(119) # (      ) N
(120) # (      if \(jentry<1000\){ ) N
(121) # () S 8 T (if\(qtagin*qmu!=osci\){ ok = "*";}else{ ok = "";}) N
(122) # () S 8 T (printf\("%6d %7d %5d %6d %4d %4d %6d %5s\\n", jentry, osci, oscimc, q5, q6) N
0 T (, qmu, qtagin, ok\);) N
(123) # () S 8 T (//iflag1=1;) N
(124) # (      }) N
(125) # (      ) N
(126) # ( ) N
(127) # (      //h_tagumok->Fill\(tagmuok\);) N
(128) # (      ) N
(129) # (      // check the sign of the muon here vs. opposite muon) N
(130) # (      // if they're equal, mixing occurred. otherwise this event is unmixed.) N
(131) # (      if \(qtagin*qmu>0\){) N
(132) # () S 8 T (h_mixed_events->Fill\(lbmctrueps\);) N
(133) # (      }else{) N
(134) # () S 8 T (h_unmixed_events->Fill\(lbmctrueps\);) N
(135) # () S 8 T () N
(136) # (      }) N
(137) # (      ) N
(dstag.C) (Page 2/4) (Apr 12, 05 18:15) title
border
grestore
(Printed by Jamie Hegarty) rhead
(dstag.C) (1/2) (Friday April 15, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(138) # (      if \(osci==1\){ // "clean" mixing, pure cosine) p n
(139) # () S 8 T (h_me_osci->Fill\(lbmctrueps\);) N
(140) # (      }else{) N
(141) # () S 8 T (h_ume_osci->Fill\(lbmctrueps\);) N
(142) # () S 8 T () N
(143) # (      }) N
(144) # () N
(145) # (      // Count the number of times that a true mixed state is tagged as such) N
(146) # (      if\(qtagin*qmu>0 && osci==1\){) N
(147) # () S 8 T (qtagmcount++;) N
(148) # (      }) N
(149) # (      // Count the number of times that a true unmixed state is tagged as such) N
(150) # (      else if\(qtagin*qmu<0 && osci==0\){) N
(151) # () S 8 T (qtagucount++;) N
(152) # (      }) N
(153) # (      // Count the number of times we're wrong.) N
(154) # (      else{) N
(155) # () S 8 T (qtagncount++;) N
(156) # (      }) N
(157) # (      // Count events in this "cleaned" sample) N
(158) # (      ecount++;) N
(159) # (    }) N
(160) # (    /************* END USER-INSERTED CODE ****************/) N
(161) # (    ) N
(162) # (  } // End looping over all entries) N
(163) # (  /*********** BEGIN USER-INSERTED CODE ****************/ ) N
(164) # (  printf\("-------------------------------------------------------\\n\\n"\); ) N
(165) # () N
(166) # (  //Calculate Dilution) N
(167) # () N
(168) # (  dilution = 1 - \(qtagmcount + qtagucount\)/ecount;) N
(169) # (  cout << "ecount ="  << ecount  << endl;) N
(170) # (  cout << "qtagmcount ="  << qtagmcount  << endl;) N
(171) # (  cout << "qtagucount ="  << qtagucount  << endl;) N
(172) # (  cout << "Dilution = "  << dilution << endl << endl;) N
(173) # () N
(174) # (  h_asymm = h_unmixed_events->GetAsymmetry\(h_mixed_events\);) N
(175) # (  h_asymm->SetBins\(30,0.,3.\);) N
(176) # (  h_asymm->SetName\("h_asymm"\);) N
(177) # (  h_asymm->SetTitle\("Asymmetry"\);) N
(178) # () N
(179) # (  h_asym_osci = h_ume_osci->GetAsymmetry\(h_me_osci\);) N
(180) # (  h_asym_osci->SetBins\(30,0.,3.\);) N
(181) # (  h_asym_osci->SetName\("h_asym_osci"\);) N
(182) # (  h_asym_osci->SetTitle\("Asymmetry \(osci\)"\);) N
(183) # () N
(184) # (  TGraph *gcos = new TGraph\(31\);) N
(185) # (  ) N
(186) # (  Double_t asymm[31];) N
(187) # (  Double_t x[31];) N
(188) # (  ifstream infile;) N
(189) # (  infile.open\("MMMM"\);) N
(190) # (  for \(Int_t i=0.; i<31; i++\){) N
(191) # (    infile >> x[i] >> asymm[i];) N
(192) # (    gcos->SetPoint\(i,x[i],asymm[i]\);) N
(193) # (  }) N
(194) # () N
(195) # (  // Draw histograms) N
(196) # () N
(197) # (  gROOT->SetStyle\("Plain"\);) N
(198) # (  gStyle->SetOptStat\(11111\);) N
(199) # (  gStyle->SetHistFillColor\(10\);) N
(200) # (  TCanvas *c1 = new TCanvas\("c1", "Canvas1", 800,600\);) N
(201) # (  c1->Divide\(2,2\);) N
(202) # (  c1->cd\(1\);) N
(203) # (  h_mixed_events->Draw\(\);) N
(204) # (  c1->cd\(2\);) N
(205) # (  h_unmixed_events->Draw\(\);) N
(206) # (  c1->cd\(3\);) N
(207) # (  h_asymm->Draw\("P*"\);) N
(208) # (  TF1 *f_cos = new TF1\("f_cos", "0.358804*cos\(7*x\)",0.,3.\);) N
(209) # (  //h_unmix1->Fit\(f_cos\);) N
(210) # (  f_cos->Draw\("same"\);) N
(dstag.C) (Page 3/4) (Apr 12, 05 18:15) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(211) # (  c1->cd\(4\);) p n
(212) # (  all_events_vpdl->Draw\(\);) N
(213) # () N
(214) # (  TCanvas *c11 = new TCanvas\("c11", "Canvas11", 800,600\);) N
(215) # (  c11->Divide\(2,2\);) N
(216) # (  c11->cd\(1\);) N
(217) # (  h_me_osci->Draw\(\);) N
(218) # (  c11->cd\(2\);) N
(219) # (  h_ume_osci->Draw\(\);) N
(220) # (  c11->cd\(3\);) N
(221) # (  h_asym_osci->Draw\("P*"\);) N
(222) # (  TF1 *f_cos1 = new TF1\("f_cos1", "cos\(7*x\)",0.,3.\);) N
(223) # (  //h_unmix1->Fit\(f_cos\);) N
(224) # (  f_cos1->Draw\("same"\);) N
(225) # (  c11->cd\(4\);) N
(226) # (  all_events_vpdl->Draw\(\);) N
(227) # (  ) N
(228) # (  TCanvas *c2 = new TCanvas\("c2", "Canvas2", 800,600\);) N
(229) # (  c2->Divide\(2,2\);) N
(230) # (  c2->cd\(1\);) N
(231) # (  h_lbdiff->Draw\(\);) N
(232) # (  c2->cd\(2\);) N
(233) # (  h2_lbdiff->Draw\(\);  ) N
(234) # (  c2->cd\(3\);) N
(235) # (  h2_lbdiff->Draw\("LEGO2"\);) N
(236) # (  c2->cd\(4\);) N
(237) # () N
(238) # () N
(239) # (  // Save it all in a Root File) N
(240) # () N
(241) # (  TObjArray *a1 = new TObjArray\(0\);) N
(242) # () N
(243) # (  a1->Add\(h_unmixed_events\);) N
(244) # (  a1->Add\(h_mixed_events\);) N
(245) # (  a1->Add\(h_ume_osci\);) N
(246) # (  a1->Add\(h_me_osci\);) N
(247) # () N
(248) # (  a1->Add\(h_asymm\);) N
(249) # (  a1->Add\(h_asym_osci\);) N
(250) # (  a1->Add\(all_events_vpdl\);) N
(251) # (  a1->Add\(h_lbdiff\);) N
(252) # (  a1->Add\(h2_lbdiff\);) N
(253) # ( ) N
(254) # (  a1->Add\(gcos\);) N
(255) # (  a1->Add\(f_cos\);) N
(256) # (  a1->Add\(c1\);) N
(257) # (  a1->Add\(c2\);) N
(258) # () N
(259) # (  TFile *f1 = new TFile\("bs_asymm.root", "recreate"\);) N
(260) # (  a1->Write\(\);) N
(261) # (  f1->Close\(\);) N
(262) # () N
(263) # () N
(264) # () N
(265) # (  /************* END USER-INSERTED CODE ****************/) N
(266) # () N
(267) # (}) N
(268) # () N
(dstag.C) (Page 4/4) (Apr 12, 05 18:15) title
border
grestore
(Printed by Jamie Hegarty) rhead
(dstag.C) (2/2) (Friday April 15, 2005) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
