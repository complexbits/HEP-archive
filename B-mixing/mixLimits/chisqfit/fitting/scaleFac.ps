%!PS-Adobe-3.0
%%Title: scaleFac_v7.C
%%For: Jamie Hegarty
%%Creator: a2ps version 4.13
%%CreationDate: Mon Apr 18 15:41:20 2005
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (#include <iostream.h>) p n
(2) # (#include "TStopwatch.h") N
(3) # (#include "TH1F.h") N
(4) # (#include "TH1.h") N
(5) # (#include "TFile.h") N
(6) # (#include "math.h") N
(7) # (#include "stdlib.h") N
(8) # (#include "TRandom.h") N
(9) # () N
(10) # (// Initial global parameters) N
(11) # (Double_t tau = 1.5;) N
(12) # (//Double_t dm  = 10.;) N
(13) # (Double_t tSigmat = 0.;) N
(14) # () N
(15) # (//) N
(16) # (// dSmear = 0 Don't use constant resolution) N
(17) # (// dSmear = 1 Conatant resolution set by tSigma) N
(18) # (// dSmear = 2 Double gauss resolution tSingmaW wide sigma,) N
(19) # (//            tSigmaN narrow sigma, fWid fraction using) N
(20) # (//            wide sigma) N
(21) # () N
(22) # (Int_t dSmear = 2;) N
(23) # (Double_t tSigma  = 0.18;) N
(24) # () N
(25) # (// From VPDLdiff double-gauss fit in ampfit_jh.C) N
(26) # (Double_t fWid = 0.50;) N
(27) # (Double_t tSigmaN = 0.1016;) N
(28) # (Double_t tSigmaW = 0.3427;) N
(29) # () N
(30) # (// Triple gauss) N
(31) # (// Double_t f1 = 0.210493;) N
(32) # (// Double_t f2 = 0.480845;) N
(33) # (// Double_t f3 = 0.308662;) N
(34) # (// Double_t tSig1 = 0.0026;) N
(35) # (// Double_t tSig2 = 0.0056;) N
(36) # (// Double_t tSig3 = 0.0141;) N
(37) # () N
(38) # (Double_t f1 = 0.3769;) N
(39) # (Double_t f2 = 0.4785;) N
(40) # (Double_t f3 = 1.-f1-f2;) N
(41) # (Double_t tSig1 = 0.002756/.03;) N
(42) # (Double_t tSig2 = 0.00545/.03;) N
(43) # (Double_t tSig3 = 0.01383/.03;) N
(44) # (//*************) N
(45) # (// Should this be set to the dilution from the MC?) N
(46) # (// \(get from running dstag.C\)) N
(47) # (//Double_t dilution = 0.282392;) N
(48) # (Double_t dilution = 1.;) N
(49) # (Double_t misTag = 0.5*\(1.- dilution\);) N
(50) # (Int_t nEvt = 10000000;) N
(51) # (//Int_t nEvt = 1000000;) N
(52) # () N
(53) # (//Int_t nBins = 30;) N
(54) # (//Double_t maxLimit = 3;) N
(55) # (Int_t nBins = 20;) N
(56) # (Double_t maxLimit = 2.;) N
(57) # () N
(58) # (//) N
(59) # (// kfactor = 0 \(1\) don't \(do\) ues k factor) N
(60) # (// VPDL = 0 \(1\) don't \(do\) use VPDL resolution associated) N
(61) # (// with biased cuts.) N
(62) # (//) N
(63) # (Int_t kfactor = 1;) N
(64) # (Int_t VPDL = 0;) N
(65) # (Double_t resScl = 1.;  // Scale resolutions by this) N
(66) # () N
(67) # (char ScaleFile[50] ="test_mk.root";) N
(68) # () N
(69) # (static Double_t* resoVPDL\(Double_t x, Double_t rVal[3]\)) N
(70) # ({) N
(71) # (  //========= Returns resolution for wide and narrow Gaussian and fraction) N
(72) # (  //========= From Rick Van Kooten) N
(73) # () N
(scaleFac_v7.C) (Page 1/5) (Apr 18, 05 15:30) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(74) # (  //  Double_t rVal[3];) p n
(75) # () N
(76) # (  // Paramters of fit) N
(77) # (  Double_t sign, sigw, sigc, frac;) N
(78) # (  Double_t p0n, p1n, p2n;) N
(79) # (  Double_t p0w, p1w, p2w;) N
(80) # (  Double_t p0c, p1c, p2c;) N
(81) # () N
(82) # (  p0n = 2.12418e-03;) N
(83) # (  p1n = 1.50815e-03;) N
(84) # (  p2n = 1.87510e+01;) N
(85) # (  p0w = 3.26639e-04;) N
(86) # (  p1w = 6.55281e-03;) N
(87) # (  p2w = 1.16181e+02;) N
(88) # (  p0c = 9.34673e-04;) N
(89) # (  p1c = 3.49873e-03;) N
(90) # (  p2c = 1.36322e+02;) N
(91) # () N
(92) # (  sign = p0n + p1n/\(1+ exp\(-1*p2n*x\)\);) N
(93) # () N
(94) # (  sigc = p0c + p1c/\(1+ exp\(-1*p2c*x\)\); ) N
(95) # () N
(96) # (  sigw = p0w + p1w/\(1+ exp\(-1*p2w*x\)\);) N
(97) # () N
(98) # (  frac = \(sigc - sign\)/\(sigw - sign\);) N
(99) # () N
(100) # (  //printf\("x = %5.3f  yn = %5.3e  yc = %5.3e  yw = %5.3e  frac = %5.3f\\n",) N
(101) # (  //) S 8 T (  x, yn[i], yc[i], yw[i], frac\);) N
(102) # (   ) N
(103) # (  rVal[0] = sigw;) N
(104) # (  rVal[1] = sign;) N
(105) # (  rVal[2] = frac;) N
(106) # () N
(107) # (  return rVal;) N
(108) # () N
(109) # (}) N
(110) # () N
(111) # () N
(112) # (void scaleFac_v7\(\){) N
(113) # (  gROOT->Reset\(\);) N
(114) # (  TStopwatch timer;) N
(115) # (  timer.Start\(\);) N
(116) # (  // Initialize variables) N
(117) # (  //  Double_t tau = 1.5;) N
(118) # (  //  Double_t dm  = 10.;) N
(119) # (  //  Int_t kfactor = 1;) N
(120) # (  //  Double_t tSigma  = 0.15;) N
(121) # (  //  Double_t tSigma  = 0.1;) N
(122) # (  //  Double_t tSigmat = 0.19;) N
(123) # (  //  Double_t tSigmat = 0.;) N
(124) # (  //   Double_t dilution = .16;) N
(125) # (  //  Double_t dilution = 1.;) N
(126) # (  //  Double_t misTag = 0.5*\(1.- dilution\);) N
(127) # (  //  Int_t nEvt = 100000000;) N
(128) # (  //Int_t nEvt = 100000000;) N
(129) # () N
(130) # (  //  Int_t nBins = 30;) N
(131) # (  //  Double_t maxLimit = 3;) N
(132) # (   ) N
(133) # () N
(134) # (  Int_t msrState;) N
(135) # () N
(136) # (  //  Int_t VPDL = 1;) N
(137) # (  Double_t sigWNF[3], mVpdl;) N
(138) # (  Double_t rndNrw;) N
(139) # (  //  Double_t resScl = 1.2;) N
(140) # (  //   ofstream out_umix;) N
(141) # (  //   ofstream out_mix;) N
(142) # () N
(143) # (  //   out_umix.open\("umix.dat"\);) N
(144) # (  //   out_mix.open\("mix.dat"\);) N
(145) # () N
(146) # (  cout << tau << "  " << tSigma << endl;) N
(scaleFac_v7.C) (Page 2/5) (Apr 18, 05 15:30) title
border
grestore
(Printed by Jamie Hegarty) rhead
(scaleFac_v7.C) (1/3) (Monday April 18, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(147) # (  // Create and fill histogram with inital information) p n
(148) # (  TH1F *init = new TH1F\("init", "Setup values",10,0.,10.\);) N
(149) # (  init->Fill\(0.,tau\);) N
(150) # (  init->Fill\(1.,tSigma\);) N
(151) # (  init->Fill\(2.,tSigmat\);) N
(152) # (  init->Fill\(3.,kfactor\);) N
(153) # (  init->Fill\(4.,VPDL\);) N
(154) # (  init->Fill\(5.,resScl\);) N
(155) # (  init->Fill\(6.,dSmear\);) N
(156) # (  init->Fill\(7.,tSigmaN\);) N
(157) # (  init->Fill\(8.,tSigmaW\);) N
(158) # (  init->Fill\(9.,fWid\);) N
(159) # () N
(160) # (  // Create a histogram for the average resolution) N
(161) # (  TH1F *aReso = new TH1F\("aReso", "Average Resolution", 200,-1.,1.\);) N
(162) # () N
(163) # (  // Open file) N
(164) # (  TFile f \(ScaleFile,"recreate"\);) N
(165) # (  char hname[7];) N
(166) # (  char hout1[7];) N
(167) # (  char hout2[7];) N
(168) # () N
(169) # (  TH1F *scaleOut[50];) N
(170) # (  f.cd\(\);) N
(171) # (  init->Write\(\);) N
(172) # () N
(173) # (  // Open K factor file) N
(174) # (  //TFile k \("kfactor.root","READ"\);) N
(175) # (  //TH1F *kf;) N
(176) # (  //kf = hkfac1;) N
(177) # () N
(178) # (  TFile* k = TFile::Open\("kfactor.root"\);) N
(179) # (  TObject *kf2 = k->Get\("hkfac1"\);) N
(180) # (  TH1F *kf = \(TH1F*\)kf2;) N
(181) # () N
(182) # (  for \(Int_t dms=1; dms<30; dms++\){) N
(183) # (    // Initialize histograms) N
(184) # (    // Real time distribution) N
(185) # (    TH1F *umixhr = new TH1F\("umixh","Decay rTime Unmixed",nBins,0.,maxLimit\);) N
(186) # (    TH1F *mixhr  = new TH1F\("mixh","Decay rTime Mixed",nBins,0.,maxLimit\);) N
(187) # (    // Measured time distribution \(after resolution\)) N
(188) # (    TH1F *umixht = new TH1F\("umixht","Decay Time Unmixed",nBins,0.,maxLimit\);) N
(189) # (    TH1F *mixht  = new TH1F\("mixht","Decay Time Mixed",nBins,0.,maxLimit\);) N
(190) # (    // Scale factor for this frequency) N
(191) # (    sprintf\(hname,"scale%d",dms\);) N
(192) # (    scaleOut[dms] = new TH1F\(hname,hname,nBins,0.,maxLimit\);) N
(193) # () N
(194) # (    for \(Int_t i=0; i<nEvt; i++\){) N
(195) # (      // Generate decay time distribution) N
(196) # (      Double_t rTime  = gRandom->Exp\(tau\);) N
(197) # (      Double_t tSmear;    ) N
(198) # (      Double_t tSmeart;) N
(199) # (      ) N
(200) # (      // Constant smear) N
(201) # (      if \(dSmear == 0\){) N
(202) # () S 8 T (tSmear = 0.;) N
(203) # (      }) N
(204) # (      else if \(dSmear == 1\){) N
(205) # () S 8 T (tSmear  = gRandom->Gaus\(0., tSigma\);) N
(206) # (      }) N
(207) # (      else if \(dSmear == 2\){) N
(208) # () S 8 T (rndNrw = gRandom->Rndm\(\);) N
(209) # () S 8 T (if \(rndNrw > fWid\){) N
(210) # () S 8 T (  tSmear  = gRandom->Gaus\(0., tSigmaN\);) N
(211) # () S 8 T (}) N
(212) # () S 8 T (else{) N
(213) # () S 8 T (  tSmear  = gRandom->Gaus\(0., tSigmaW\);) N
(214) # () S 8 T (}) N
(215) # (      }) N
(216) # (      else if \(dSmear == 3\){) N
(217) # () S 8 T (rndNrw = gRandom->Rndm\(\);) N
(218) # () S 8 T (//cout << "RND  " << rndNrw << endl;) N
(219) # () S 8 T (if \(rndNrw < f1\){) N
(scaleFac_v7.C) (Page 3/5) (Apr 18, 05 15:30) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(220) # () p 8 T (  tSmear  = gRandom->Gaus\(0., tSig1\);) N
(221) # () S 8 T (  //cout << 1 << endl;) N
(222) # () S 8 T (}) N
(223) # () S 8 T (if \(rndNrw >= f1 && rndNrw < f1+f2\){) N
(224) # () S 8 T (  tSmear  = gRandom->Gaus\(0., tSig2\);) N
(225) # () S 8 T (  //cout << f1 << "  " << 2 << endl;) N
(226) # () S 8 T (}) N
(227) # () S 8 T (if \(rndNrw >= f1+f2\){) N
(228) # () S 8 T (  tSmear  = gRandom->Gaus\(0., tSig3\);) N
(229) # () S 8 T (  //cout << f1+f2 << "  " << 3 << endl;) N
(230) # () S 8 T (}) N
(231) # (      }) N
(232) # () N
(233) # (    // Time dependent smear) N
(234) # (    if \(tSigmat == 0.\){) N
(235) # (      tSmeart = 0.;) N
(236) # (    }) N
(237) # (    else{) N
(238) # (      tSmeart = gRandom->Gaus\(0., tSigmat*rTime\);) N
(239) # (    }) N
(240) # () N
(241) # (    //Double_t mTime  = rTime + tSmear;) N
(242) # (    Double_t mTimet = rTime + tSmear + tSmeart;) N
(243) # () N
(244) # (    Double_t tSmearV;) N
(245) # () N
(246) # (    // K factor \(Check whether mTimet correct\)) N
(247) # (    if \(kfactor != 0\){) N
(248) # (      Double_t kfac = kf->GetRandom\(\);) N
(249) # (      mVpdl = rTime/kfac; // measured VPDL) N
(250) # () N
(251) # (      // VPDL dependent smear from RVK for cut data) N
(252) # () N
(253) # (      if \(VPDL == 0\){) N
(254) # () S 8 T (tSmearV = 0;) N
(255) # (      }) N
(256) # (      else{) N
(257) # () S 8 T (Double_t* dummy = resoVPDL\(0.03*mVpdl, sigWNF\);) N
(258) # () S 8 T (// Scale resolution) N
(259) # () S 8 T (sigWNF[0] = sigWNF[0]*resScl;) N
(260) # () S 8 T (sigWNF[1] = sigWNF[1]*resScl;) N
(261) # () S 8 T (// ) S 16 T (cout << 0.03*mVpdl << "  ") N
(262) # () S 8 T (// ) S 16 T (     << sigWNF[0] << "  ") N
(263) # () S 8 T (// ) S 16 T (     << sigWNF[1] << "  ") N
(264) # () S 8 T (// ) S 16 T (     << sigWNF[2] << endl;) N
(265) # () N
(266) # () S 8 T (Double_t ifWide = gRandom->Rndm\(\);) N
(267) # () S 8 T (if \(ifWide < sigWNF[2]\){) N
(268) # () S 8 T (  tSmearV = gRandom->Gaus\(0., sigWNF[0]/0.03\);) N
(269) # () S 8 T (}) N
(270) # () S 8 T (else{) N
(271) # () S 8 T (  tSmearV = gRandom->Gaus\(0., sigWNF[1]/0.03\);) N
(272) # () S 8 T (}) N
(273) # (      }) N
(274) # (//       cout << "tSmear = " << tSmear ) N
(275) # (// ) S 8 T (   << "  tSmearV = " << tSmearV) N
(276) # (// ) S 8 T (   << "  tSmeart = " << tSmeart << endl;) N
(277) # (      mTimet = rTime/kfac + tSmearV + tSmear + tSmeart;) N
(278) # (      aReso->Fill\(rTime-mTimet\);) N
(279) # (    }) N
(280) # (    ) N
(281) # (    ) N
(282) # () N
(283) # (    // Does it mix unMix = 1 no, unMix = -1 yes) N
(284) # (    Double_t mixTest   = 2.*gRandom->Rndm\(\);) N
(285) # (    Double_t unMix  = 1. + TMath::Cos\(dms*rTime\);) N
(286) # (    Int_t mixState = 1;) N
(287) # (    if \(mixTest > unMix\){) N
(288) # (      mixState = -1;) N
(289) # (    }) N
(290) # () N
(291) # (    if \(misTag != 0.\){) N
(292) # (      Double_t mTag = gRandom->Rndm\(\);) N
(scaleFac_v7.C) (Page 4/5) (Apr 18, 05 15:30) title
border
grestore
(Printed by Jamie Hegarty) rhead
(scaleFac_v7.C) (2/3) (Monday April 18, 2005) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(293) # (      if \(mTag < misTag\){) p n
(294) # () S 8 T (msrState = -1 * mixState;) N
(295) # (      }) N
(296) # (      else{) N
(297) # () S 8 T (msrState = mixState;) N
(298) # (      }) N
(299) # (    }) N
(300) # (    else{) N
(301) # (      msrState = mixState;) N
(302) # (    }) N
(303) # () N
(304) # (    if \(msrState == 1\){) N
(305) # (      umixht->Fill\(mTimet\);) N
(306) # (      umixhr->Fill\(rTime\);) N
(307) # (      //out_umix << mTime << "  " << 1 << endl;) N
(308) # (    }) N
(309) # (    if \(msrState == -1\){) N
(310) # (      mixht->Fill\(mTimet\);) N
(311) # (      mixhr->Fill\(rTime\);) N
(312) # (      //out_mix << mTime << "  " << -1 << endl;) N
(313) # (    }) N
(314) # (  }) N
(315) # () N
(316) # (  // Make asymmetry distribution) N
(317) # (  TH1* asymt = umixht->GetAsymmetry\(mixht\);) N
(318) # (  TH1* asymr = umixhr->GetAsymmetry\(mixhr\);) N
(319) # () N
(320) # (  cout << "dms = " << dms << endl;) N
(321) # (  scaleOut[dms]->Divide\(asymt,asymr\);) N
(322) # (  f.cd\(\);) N
(323) # (  scaleOut[dms]->Write\(\);) N
(324) # () N
(325) # (//   TH1 *realAh = \(TH1*\)asymr->Clone;) N
(326) # (   sprintf\(hout1,"real%d",dms\);) N
(327) # (   asymr->SetName\(hout1\);) N
(328) # () N
(329) # (//   TH1 *smerAh = \(TH1*\)asymt->Clone;) N
(330) # (   sprintf\(hout2,"smer%d",dms\);) N
(331) # (   asymt->SetName\(hout2\);) N
(332) # () N
(333) # (  asymt->Write\(\);) N
(334) # (  asymr->Write\(\);) N
(335) # (  //    scale1->Draw\("same"\);) N
(336) # () N
(337) # (}  ) N
(338) # (f.Close\(\);) N
(339) # (timer.Stop\(\);) N
(340) # (Double_t realTime = timer.RealTime\(\);) N
(341) # (Double_t cpuTime = timer.CpuTime\(\);) N
(342) # (cout << "Real time = " << realTime ) N
(343) # (<< "  CPU Time = " << cpuTime << endl;) N
(344) # (}) N
(345) # () N
(346) # () N
(scaleFac_v7.C) (Page 5/5) (Apr 18, 05 15:30) title
border
grestore
(Printed by Jamie Hegarty) rhead
(scaleFac_v7.C) (3/3) (Monday April 18, 2005) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
