#ifndef __FUNC_CPP__
#include "func.cpp"
#endif

unbinFitlftm()
{
  TMinuit *gMinuit = new TMinuit(2);
  gMinuit -> SetFCN(fit_lftm);
  
  Double_t arglist[10];
  Double_t vstart[10];
  Double_t step[10];

  Double_t p0=0, p1=1;
  Int_t ierflg=0;
 
  Double_t par0, par1;
  Double_t err0, err1;

  // Set to 0.5 for likelihood, 1 for chisquare

  arglist[0] = 0.5;
  gMinuit->mnexcm("SET ERR", arglist, 1, ierflg);

  // Set initial values of parameters 
  //(same t0, sigma as used for fitting mixed, unmixed separately)

  vstart[0] = oscpar0_init;
  vstart[1] = oscpar2_init;


  step[0] = oscerr0_step;
  step[1] = oscerr2_step;


  gMinuit->mnparm(0, "t0", vstart[0], step[0], 0., 0., ierflg);
  gMinuit->mnparm(1, "sigma", vstart[1], step[1], 0., 0., ierflg);

  // Do minimization
  arglist[0] = 3000.;
  arglist[1] = 0.1;
  gMinuit->mnexcm("CALL FCN", &p0, 1, ierflg);
  gMinuit->mnexcm("MIGRAD", arglist, 2, ierflg);
  gMinuit->mnexcm("CALL FCN", &p1, 1, ierflg);

  // Get parameters 
  gMinuit->GetParameter(0,par0,err0);
  gMinuit->GetParameter(1,par1,err1);

  // Export the fitted parameters so we can graph them.

  fitlpar[0]=par0;
  fitlpar[1]=par1;

  fitlerr[0]=err0;
  fitlerr[1]=err1;
 

  delete gMinuit;

}

void fit_lftm(Int_t &npar, Double_t *gin, Double_t &f,
	     Double_t *par, Int_t iflag)
{
  if (iflag == 1) cout << "iflag  " << iflag << endl;
  if (iflag == 3) cout << "iflag  " << iflag << endl;

  Double_t nll = 0;

  for (Int_t i=0; i<ecount; i++){
    
    Double_t ll = lifetime_fit(par[0], par[1], lifetime[i]);
    nll -= TMath::Log(ll);

  }
  f = nll;

}

