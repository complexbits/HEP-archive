//************************************************
// Use minuit to do an unbinned fit
//
// Fits for lifetime, dm, sigma, dilution
//
// by P. Gutierrez
// 3-12-04
//************************************************


//#include "params.hpp"

//#ifndef __COMPLEX_MATH__
//#include "complexmath.h"
//#endif

#ifndef __FUNC_CPP__
#include "func.cpp"
#endif

void unbinFitosc_pts()
{
  TMinuit *gMinuit = new TMinuit(4);
  gMinuit -> SetFCN(mll_fit_pts);
  
  Double_t arglist[10];
  Double_t vstart[10];
  Double_t step[10];

  Double_t p0=0,p1=1,p2=2,p3=3;
  Int_t ierflg=0;
 
  Double_t par0;
  Double_t err0;

  // Set to 0.5 for likelihood, 1 for chisquare
  arglist[0] = 0.5;
  gMinuit->mnexcm("SET ERR", arglist, 1, ierflg);

  // Set initial values of parameters
  vstart[0] = oscpar0_init;
  step[0] = oscerr0_step;
  gMinuit->mnparm(0, "mistag", vstart[0], step[0], 0., 0., ierflg);


  // Do minimization
  arglist[0] = 3000.;
  arglist[1] = 0.1;
  gMinuit->mnexcm("CALL FCN", &p1, 1, ierflg);
  gMinuit->mnexcm("MIGRAD", arglist, 2, ierflg);
  gMinuit->mnexcm("CALL FCN", &p3, 1, ierflg);

  // Get parameters 
  gMinuit->GetParameter(0,par0,err0);


  // Export the fitted parameters so we can graph them.
  fitpar=par0;
  fiterr=err0;

  RooComplex ct = RooMath::ComplexErrFunc(2.,1.);
  Double_t ctre=ct.re();
  Double_t ctim=ct.im();
  printf("ct  %10.5f  %10.5f  \n",ctre,ctim);

  delete gMinuit;

}


void mll_fit_pts(Int_t &npar, Double_t *gin, Double_t &f,
	     Double_t *par, Int_t iflag)
{
  if (iflag == 1) printf("iflag  %2d\n",iflag);
  if (iflag == 3) printf("iflag  %2d\n",iflag);

  Double_t nll = 0;
  Double_t eSigma;

  for (Int_t i=0; i<nEvts; i++){
    
    //Calculate the actual sigma value in this event
    eSigma = TMath::Sqrt((tSigma**2)+((nSigma*rTime[i]))**2);

    Double_t ll1 = mixing(lifetime[i],tau,dm_fit,eSigma,1);
    Double_t ll2 = mixing(lifetime[i],tau,dm_fit,eSigma,-1);

    if (tag[i] == -1){
      Double_t ll = (1-par[0])*ll1 + par[0]*ll2;
    }

    if (tag[i] == 1){
      Double_t ll = (1-par[0])*ll2 + par[0]*ll1;
    }

    nll -= TMath::Log(ll);
  }
  f = nll;
}
