/////////////////////////////////////////////////////////////////////////////
//               Name       : ReadSAMinfo.cpp                              //
//               Created by : Prolay Kumar Mal                             //
//               Purpose    : To read the output of SAM query              //
//                            and craete map for the code,                 //
//                            RecoGen.cpp                                  // 
//               Date       : April 15, 2002                               //
//               Input      : info.txt (generated by Python script         //
//                            after making SQL query to SAM                //
//                            and also uses the ReadSAMinfo.hpp            //
//               Output     : reco_out.txt (in the preferred python        //
//                            dictionary format by Michael) and            //
//                            error_out.txt for errors                     //
//       This code is written based on the suggestions made by             //
//                   Marcos Verzocchi                                      //
//             Many many thanks to Alexander Kupco                         //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
#include "ReadSAMinfo.hpp"
#include <string>
#include <fstream>
#include <iostream>
#include <map>
using namespace std;

ReadInfo::ReadInfo(){}
//copy constructor
ReadInfo::ReadInfo(const char * filename, const int numfile){
  this->readfile(filename, numfile);
}
//Reading the output of SQLquery:
void ReadInfo::readfile(const char * namefile, const int noffile){
  const int N=noffile;
  string rootfile;
  string vers;
  string stream;
  char rf[100], vrs[40], str[200], str2[100];
  int runnumber;
  string rawfile;
  int minL1bit;
  int minL3bit;
  int zeroL1bit;
  int zeroL3bit;
  int norawfile;
  int Noevt;
  int LBNmin;
  int LBNmax;
  FILE* f=fopen(namefile,"r");
  for(int i=0; i<N;i++){
    fscanf(f,"%s%s%d%s%d%d%d%d%d",rf,vrs,&runnumber,str,&minL1bit,&minL3bit,
	   &zeroL1bit, &zeroL3bit,&norawfile);
    rootfile=rf;
    vers=vrs;
    stream=str;
    int rawnofevt=0;
    int LBNlowest=10000000;
    int LBNhighest=-1;
    for(int j=0;j<norawfile;j++){
      fscanf(f, "%s%d%d%d", str2, &Noevt, &LBNmin, &LBNmax);
      rawfile=str2;
      if(LBNmin<LBNlowest)LBNlowest=LBNmin;
      if(LBNmax>LBNhighest)LBNhighest=LBNmax;
      rawnofevt=rawnofevt+Noevt;
      for(int k=LBNmin;k<LBNmax+1;k++){
	_nametuple[k]=rootfile;
	_datastream[k]=stream;
	_version[k]=vers;
	_l1bitmin[k]=minL1bit;
	_l3bitmin[k]=minL3bit;
	_l1bitzero[k]=zeroL1bit;
	_l3bitzero[k]=zeroL3bit;
	_runnumb[k]=runnumber;
      }
    }
    _rawnofevnt[rootfile]=rawnofevt;
    _LBNmaxima[rootfile]=LBNhighest;
    _LBNminima[rootfile]=LBNlowest;
  }
  
  fclose(f);
}

int ReadInfo::ReadLBN(const int LBN) const{
  map<int, string>::const_iterator it = _nametuple.find(LBN);
  return (it != _nametuple.end());
}

