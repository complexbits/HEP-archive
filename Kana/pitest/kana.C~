#define kana_cxx
#include "kana.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

void kana::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L kana.C
//      Root > kana t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

   if (fChain == 0) return;

   //fChain->SetBranchStatus("MC",1); 

   Long64_t nentries = fChain->GetEntriesFast();

   Int_t nbytes = 0, nb = 0;

   /***** BEGIN USER-INSERTED CODE (Prior to event loop) ************************/

   // Tell us how many entries there are

   printf("\n Entries in this roottuple: %12d \n\n\n", nentries);


   // Iniitialize Histograms


   TH1F *pions = new TH1F("pions", "pions", 100, -215., 215.);
   TH1F *pi_evt = new TH1F("pi_evt", "pi_evt", 100, 0, 100.);

   TH1F *pi_pt = new TH1F("pi_pt", "pi_pt", 100, 3., 10.); 
   TH1F *pi_px = new TH1F("pi_px", "pi_px", 100, 3., 10.); 
   TH1F *pi_py = new TH1F("pi_py", "pi_py", 100, 3., 10.); 
   TH1F *pi_pz = new TH1F("pi_pz", "pi_pz", 100, 3., 10.); 
   TH1F *pi_ptot = new TH1F("pi_ptot", "pi_ptot", 100, 3., 10.);

   TH1F *pi_theta = new TH1F("pi_theta", "pi_theta", 100, -1.6, 1.6);
   TH1F *pi_eta = new TH1F("pi_eta", "pi_eta", 100, 0., 0.25);

   TH1F *kaons = new TH1F("kaons", "kaons", 100, 300., 315.);
   TH1F *k_evt = new TH1F("k_evt", "k_evt", 100, 0, 100.);

   TH1F *k_pt = new TH1F("k_pt", "k_pt", 100, 3., 10.); 
   TH1F *k_px = new TH1F("k_px", "k_px", 100, 3., 10.); 
   TH1F *k_py = new TH1F("k_py", "k_py", 100, 3., 10.); 
   TH1F *k_pz = new TH1F("k_pz", "k_pz", 100, 3., 10.); 
   TH1F *k_ptot = new TH1F("k_ptot", "k_ptot", 100, 3., 10.);

   TH1F *k_theta = new TH1F("k_theta", "k_theta", 100, -1.6, 1.6);
   TH1F *k_eta = new TH1F("k_eta", "k_eta", 100, 0., 0.25);

   // Initialize other variables

   Double_t kpx, kpy, kpz, kpt, kptot, ktheta, keta;
   Double_t pipx, pipy, pipz, pipt, piptot, pitheta, pieta;
   Int_t kevt, pievt;

   /***** END USER-INSERTED CODE (Prior to event loop) **************************/
   
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   nbytes += nb;
     // if (Cut(ientry) < 0) continue;
     
     /***** BEGIN USER-INSERTED CODE (Inside to event loop) ************************/
     
     // Get the number of MC particles in this event:
     
     Int_t npart = MC_n_mc_part; 
     // can't use this (?): arrays only go to 3000, but npart > 3000 for some events
     
     for(Int_t ipart=0; ipart<3000; ipart++){
       
       // Check for Pions (pythia particle id +/-211) which came from Kaons (311)
       
       if(TMath::Abs(MC_mc_partid[ipart]) == 211){

	 // Kaons (K0) not available, so check for parents which are K*0 or Ks0:
	 
	 if(MC_mc_parentid[ipart] == 310 || MC_mc_parentid[ipart] == 313){
	   	   
	   // Get the Pt of the pion and fill a histogram with it:
	   
	   pipx = MC_mc_partPx[ipart];
	   pipy = MC_mc_partPy[ipart];
	   pipz = MC_mc_partPz[ipart];

	   pipt = TMath::Sqrt((pipx*pipx)+(pipy*pipy));

	   piptot = TMath::Sqrt((pipx*pipx)+(pipy*pipy)+(pipz*pipz));

	   // Get the Pt of the kaon and fill a histogram with it:
	   
	   kpx = MC_mc_parentPx[ipart];
	   kpy = MC_mc_parentPy[ipart];
	   kpz = MC_mc_parentPz[ipart];
	   
	   kpt = TMath::Sqrt((kpx*kpx)+(kpy*kpy));
	   kptot = TMath::Sqrt((kpx*kpx) + (kpy*kpy) + (kpz*kpz));
	   
	   if (pipt >=3.0){
	     
	     if (pipz != 0.){
	       
	       pi_px->Fill(kpx);
	       pi_py->Fill(kpy);
	       pi_pz->Fill(pipz);
	       
	       pi_pt->Fill(pipt);
	       
	       pitheta = atan(pipt/pipz);
	       
	       pieta = -TMath::Log(TMath::Tan(pitheta/2));
	       
	       pi_theta->Fill(pitheta);
	       
	       pi_eta->Fill(pieta);

	       pi_ptot->Fill(piptot);
	       
	     }
	     
	     if (kpz != 0.){
	       
	       k_px->Fill(kpx);
	       k_py->Fill(kpy);
	       k_pz->Fill(kpz);
	       
	       k_pt->Fill(kpt);
	       
	       ktheta = atan(kpt/kpz);
	       
	       k_theta->Fill(ktheta);
	       
	       keta = -TMath::Log(TMath::Tan(ktheta/2));
	       
	       k_eta->Fill(keta);
	       
	       k_ptot->Fill(kptot);
	     }
	     
	     // Put the pions in a histogram:
	     
	     pions->Fill(MC_mc_partid[ipart]);
	     
	     //Put the kaons in a histogram:
	     
	     kaons->Fill(MC_mc_parentid[ipart]);

	     // Count the number of kaons & pions in this event

	     kevt++;
	     pievt++;
	     
	   }	
	 }
       }
     }
     
     k_evt->Fill(kevt);
     pi_evt->Fill(pievt);

     if ( fmod( float(jentry), ( float(nentries)/7. ) ) == 0 ){
       
       printf("\n\nNow analyzing entry number %12d\n\n", jentry);
       
     }     
     
     /***** END USER-INSERTED CODE (Inside to event loop) **************************/
     
   }
   
   /***** BEGIN USER-INSERTED CODE (After event loop) ************************/
   
   
   // Create a canvas and draw the histograms

   TCanvas *kcan = new TCanvas("kcan", "kcan", 800, 800);
   kcan->Divide(2,2);

   kcan->cd(1);
   k_pt->Draw();

   kcan->cd(2);
   kaons->Draw();

   kcan->cd(3);
   k_theta->Draw();

   kcan->cd(4);
   k_eta->Draw();

   // Save everything in a root file:

   TObjArray *a1 = new TObjArray(0);

   a1->Add(kaons);
   a1->Add(k_evt);

   a1->Add(k_pt);
   a1->Add(k_px);
   a1->Add(k_py);
   a1->Add(k_pz);
   a1->Add(k_theta);
   a1->Add(k_eta);

   a1->Add(pions);
   a1->Add(pi_evt);

   a1->Add(pi_pt);
   a1->Add(pi_px);
   a1->Add(pi_py);
   a1->Add(pi_pz);
   a1->Add(pi_theta);
   a1->Add(pi_eta);

   a1->Add(k_ptot);
   a1->Add(pi_ptot);

   TFile *f1 = new TFile("kana.root", "recreate");
   a1->Write();
   f1->Close();

   /***** END USER-INSERTED CODE (After event loop) **************************/

}
